'''This file will contain a few classes to facilitate the training and execution of a decision tree, in addition it will contain a way to use a pre-trained model (which may or may not be stored on an external file)''''''This is a helper class to allow the model to better understand the data it is working with, storing some usefull infoPrimaryKey should be a key in the DF used, and should be unique. It is used to signify individual tuples.allKeys is a list of all keys, this can be obtained from the DF but this spec allows the model to train on a subset of the dataframe if needed.'''import numpy as npfrom sklearn import treeclass ModelSignifier():    def  __init__(self, primaryKey, allKeys):        if (not primaryKey in allKeys):           raise ValueError("Primary key missing from allKeys ")               self.primaryKey = primaryKey        self.allKeys = [primaryKey] + allKeys.remove(primaryKey)defaultSig = ModelSignifier('a', ['a'])'''NYI: class that allows the training and use of a decision treeMost methods will have additional parameters'''class DecisionTree():    def __init__(ModelSignifier = defaultSig):        #todo: implement        self.defaultModel = None        pass        def TrainNewModel(self, data):        #todo:implement        pass        def Predict(self, data, model=defaultModel):        #todo:implement        pass